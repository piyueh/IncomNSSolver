!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	include/class_PoissonSolver.h	/^		SparseMatrix<double> A;$/;"	m	class:PoissonSolver	access:private
BCCorrectA	PoissonSolver.cpp	/^int PoissonSolver::BCCorrectA(Boundary & Surf)$/;"	f	class:PoissonSolver	signature:(Boundary & Surf)
BCCorrectA	include/class_PoissonSolver.h	/^		int BCCorrectA();$/;"	p	class:PoissonSolver	access:private	signature:()
BIN	makefile	/^BIN = test.out$/;"	m
Boundary	Boundary.cpp	/^Boundary::Boundary(int N, string dir, vector<int> idx, int t, double v)$/;"	f	class:Boundary	signature:(int N, string dir, vector<int> idx, int t, double v)
Boundary	include/class_Boundary.h	/^		Boundary() = default;$/;"	p	class:Boundary	access:public	signature:()
Boundary	include/class_Boundary.h	/^		Boundary(int, string, vector<int>, int, double);$/;"	p	class:Boundary	access:public	signature:(int, string, vector<int>, int, double)
Boundary	include/class_Boundary.h	/^class Boundary$/;"	c
Boundary::Boundary	Boundary.cpp	/^Boundary::Boundary(int N, string dir, vector<int> idx, int t, double v)$/;"	f	class:Boundary	signature:(int N, string dir, vector<int> idx, int t, double v)
Boundary::Boundary	include/class_Boundary.h	/^		Boundary() = default;$/;"	p	class:Boundary	access:public	signature:()
Boundary::Boundary	include/class_Boundary.h	/^		Boundary(int, string, vector<int>, int, double);$/;"	p	class:Boundary	access:public	signature:(int, string, vector<int>, int, double)
Boundary::Cell	include/class_Boundary.h	/^		vector<int> Cell;$/;"	m	class:Boundary	access:private
Boundary::Ncells	include/class_Boundary.h	/^		int Ncells;$/;"	m	class:Boundary	access:private
Boundary::Type	include/class_Boundary.h	/^		int Type;$/;"	m	class:Boundary	access:private
Boundary::bgCell	Boundary.cpp	/^vector<int>::const_iterator Boundary::bgCell()$/;"	f	class:Boundary	signature:()
Boundary::bgCell	include/class_Boundary.h	/^		vector<int>::const_iterator bgCell();$/;"	p	class:Boundary	access:public	signature:()
Boundary::direction	include/class_Boundary.h	/^		string direction;$/;"	m	class:Boundary	access:private
Boundary::edCell	Boundary.cpp	/^vector<int>::const_iterator Boundary::edCell()$/;"	f	class:Boundary	signature:()
Boundary::edCell	include/class_Boundary.h	/^		vector<int>::const_iterator edCell();$/;"	p	class:Boundary	access:public	signature:()
Boundary::getBCvalue	Boundary.cpp	/^double Boundary::getBCvalue()$/;"	f	class:Boundary	signature:()
Boundary::getBCvalue	include/class_Boundary.h	/^		double getBCvalue();$/;"	p	class:Boundary	access:public	signature:()
Boundary::getDirection	Boundary.cpp	/^string Boundary::getDirection()$/;"	f	class:Boundary	signature:()
Boundary::getDirection	include/class_Boundary.h	/^		string getDirection();$/;"	p	class:Boundary	access:public	signature:()
Boundary::getNcells	Boundary.cpp	/^int Boundary::getNcells()$/;"	f	class:Boundary	signature:()
Boundary::getNcells	include/class_Boundary.h	/^		int getNcells();$/;"	p	class:Boundary	access:public	signature:()
Boundary::getType	Boundary.cpp	/^int Boundary::getType()$/;"	f	class:Boundary	signature:()
Boundary::getType	include/class_Boundary.h	/^		int getType();$/;"	p	class:Boundary	access:public	signature:()
Boundary::print	Boundary.cpp	/^void Boundary::print()$/;"	f	class:Boundary	signature:()
Boundary::print	include/class_Boundary.h	/^		void print();$/;"	p	class:Boundary	access:public	signature:()
Boundary::value	include/class_Boundary.h	/^		double value;$/;"	m	class:Boundary	access:private
CC	makefile	/^CC = clang$/;"	m
CFLAGS	makefile	/^CFLAGS = -std=c++11 -g$/;"	m
CXX	makefile	/^CXX = clang++$/;"	m
Cell	include/class_Boundary.h	/^		vector<int> Cell;$/;"	m	class:Boundary	access:private
InitA	PoissonSolver.cpp	/^int PoissonSolver::InitA()$/;"	f	class:PoissonSolver	signature:()
InitA	include/class_PoissonSolver.h	/^		int InitA();$/;"	p	class:PoissonSolver	access:private	signature:()
InitLinearSys	PoissonSolver.cpp	/^int PoissonSolver::InitLinearSys$/;"	f	class:PoissonSolver	signature:(int N1, int N2, int N3, double d1, double d2, double d3, vector<Boundary> & BC)
InitLinearSys	include/class_PoissonSolver.h	/^		int InitLinearSys(int, int, int, double, double, double, vector<Boundary> &);$/;"	p	class:PoissonSolver	access:public	signature:(int, int, int, double, double, double, vector<Boundary> &)
Ncells	include/class_Boundary.h	/^		int Ncells;$/;"	m	class:Boundary	access:private
Nx	include/class_PoissonSolver.h	/^		int Nx, Ny, Nz;$/;"	m	class:PoissonSolver	access:private
Ny	include/class_PoissonSolver.h	/^		int Nx, Ny, Nz;$/;"	m	class:PoissonSolver	access:private
Nz	include/class_PoissonSolver.h	/^		int Nx, Ny, Nz;$/;"	m	class:PoissonSolver	access:private
OBJS	makefile	/^OBJS = Boundary.o PoissonSolver.o main.o$/;"	m
PoissonSolver	include/class_PoissonSolver.h	/^		PoissonSolver() = default;$/;"	p	class:PoissonSolver	access:public	signature:()
PoissonSolver	include/class_PoissonSolver.h	/^class PoissonSolver$/;"	c
PoissonSolver::A	include/class_PoissonSolver.h	/^		SparseMatrix<double> A;$/;"	m	class:PoissonSolver	access:private
PoissonSolver::BCCorrectA	PoissonSolver.cpp	/^int PoissonSolver::BCCorrectA(Boundary & Surf)$/;"	f	class:PoissonSolver	signature:(Boundary & Surf)
PoissonSolver::BCCorrectA	include/class_PoissonSolver.h	/^		int BCCorrectA();$/;"	p	class:PoissonSolver	access:private	signature:()
PoissonSolver::InitA	PoissonSolver.cpp	/^int PoissonSolver::InitA()$/;"	f	class:PoissonSolver	signature:()
PoissonSolver::InitA	include/class_PoissonSolver.h	/^		int InitA();$/;"	p	class:PoissonSolver	access:private	signature:()
PoissonSolver::InitLinearSys	PoissonSolver.cpp	/^int PoissonSolver::InitLinearSys$/;"	f	class:PoissonSolver	signature:(int N1, int N2, int N3, double d1, double d2, double d3, vector<Boundary> & BC)
PoissonSolver::InitLinearSys	include/class_PoissonSolver.h	/^		int InitLinearSys(int, int, int, double, double, double, vector<Boundary> &);$/;"	p	class:PoissonSolver	access:public	signature:(int, int, int, double, double, double, vector<Boundary> &)
PoissonSolver::Nx	include/class_PoissonSolver.h	/^		int Nx, Ny, Nz;$/;"	m	class:PoissonSolver	access:private
PoissonSolver::Ny	include/class_PoissonSolver.h	/^		int Nx, Ny, Nz;$/;"	m	class:PoissonSolver	access:private
PoissonSolver::Nz	include/class_PoissonSolver.h	/^		int Nx, Ny, Nz;$/;"	m	class:PoissonSolver	access:private
PoissonSolver::PoissonSolver	include/class_PoissonSolver.h	/^		PoissonSolver() = default;$/;"	p	class:PoissonSolver	access:public	signature:()
PoissonSolver::b	include/class_PoissonSolver.h	/^		Matrix<double, Dynamic, Dynamic> b;$/;"	m	class:PoissonSolver	access:private
PoissonSolver::dx	include/class_PoissonSolver.h	/^		double dx, dy, dz;$/;"	m	class:PoissonSolver	access:private
PoissonSolver::dy	include/class_PoissonSolver.h	/^		double dx, dy, dz;$/;"	m	class:PoissonSolver	access:private
PoissonSolver::dz	include/class_PoissonSolver.h	/^		double dx, dy, dz;$/;"	m	class:PoissonSolver	access:private
PoissonSolver::printA	PoissonSolver.cpp	/^void PoissonSolver::printA()$/;"	f	class:PoissonSolver	signature:()
PoissonSolver::printA	include/class_PoissonSolver.h	/^		void printA();$/;"	p	class:PoissonSolver	access:public	signature:()
PoissonSolver::x	include/class_PoissonSolver.h	/^		Matrix<double, Dynamic, Dynamic> x;$/;"	m	class:PoissonSolver	access:private
Type	include/class_Boundary.h	/^		int Type;$/;"	m	class:Boundary	access:private
b	include/class_PoissonSolver.h	/^		Matrix<double, Dynamic, Dynamic> b;$/;"	m	class:PoissonSolver	access:private
bgCell	Boundary.cpp	/^vector<int>::const_iterator Boundary::bgCell()$/;"	f	class:Boundary	signature:()
bgCell	include/class_Boundary.h	/^		vector<int>::const_iterator bgCell();$/;"	p	class:Boundary	access:public	signature:()
direction	include/class_Boundary.h	/^		string direction;$/;"	m	class:Boundary	access:private
dx	include/class_PoissonSolver.h	/^		double dx, dy, dz;$/;"	m	class:PoissonSolver	access:private
dy	include/class_PoissonSolver.h	/^		double dx, dy, dz;$/;"	m	class:PoissonSolver	access:private
dz	include/class_PoissonSolver.h	/^		double dx, dy, dz;$/;"	m	class:PoissonSolver	access:private
edCell	Boundary.cpp	/^vector<int>::const_iterator Boundary::edCell()$/;"	f	class:Boundary	signature:()
edCell	include/class_Boundary.h	/^		vector<int>::const_iterator edCell();$/;"	p	class:Boundary	access:public	signature:()
getBCvalue	Boundary.cpp	/^double Boundary::getBCvalue()$/;"	f	class:Boundary	signature:()
getBCvalue	include/class_Boundary.h	/^		double getBCvalue();$/;"	p	class:Boundary	access:public	signature:()
getDirection	Boundary.cpp	/^string Boundary::getDirection()$/;"	f	class:Boundary	signature:()
getDirection	include/class_Boundary.h	/^		string getDirection();$/;"	p	class:Boundary	access:public	signature:()
getNcells	Boundary.cpp	/^int Boundary::getNcells()$/;"	f	class:Boundary	signature:()
getNcells	include/class_Boundary.h	/^		int getNcells();$/;"	p	class:Boundary	access:public	signature:()
getType	Boundary.cpp	/^int Boundary::getType()$/;"	f	class:Boundary	signature:()
getType	include/class_Boundary.h	/^		int getType();$/;"	p	class:Boundary	access:public	signature:()
main	main.cpp	/^int main()$/;"	f	signature:()
main	test.cpp	/^int main()$/;"	f	signature:()
print	Boundary.cpp	/^void Boundary::print()$/;"	f	class:Boundary	signature:()
print	include/class_Boundary.h	/^		void print();$/;"	p	class:Boundary	access:public	signature:()
printA	PoissonSolver.cpp	/^void PoissonSolver::printA()$/;"	f	class:PoissonSolver	signature:()
printA	include/class_PoissonSolver.h	/^		void printA();$/;"	p	class:PoissonSolver	access:public	signature:()
value	include/class_Boundary.h	/^		double value;$/;"	m	class:Boundary	access:private
x	include/class_PoissonSolver.h	/^		Matrix<double, Dynamic, Dynamic> x;$/;"	m	class:PoissonSolver	access:private
